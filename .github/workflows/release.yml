name: Release (Tauri)

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Build only (no release upload)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and upload release artifacts
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        # platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target

      - name: Derive version from tag (SemVer)
        shell: bash
        env:
          RAW_TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.event.release.tag_name }}
          DRY_RUN: ${{ inputs.dry_run }}
        run: |
          TAG="${RAW_TAG}"
          if [[ -z "$TAG" ]]; then
            if [[ "$DRY_RUN" == "true" ]]; then
              TAG="v0.0.0-dev"
              echo "No tag found; using $TAG for dry run"
            else
              BRANCH="${GITHUB_REF##*/}"
              BASE_TAG="v0.0.0"
              LATEST_TAG=$(git tag --list "v*" --sort=-v:refname | head -n1)
              if [[ -n "$LATEST_TAG" ]]; then
                BASE_TAG="$LATEST_TAG"
              fi
              IFS='.-' read -r _ MAJOR MINOR PATCH _ <<< "${BASE_TAG#v}"
              PATCH=$((PATCH + 1))
              TAG="v${MAJOR}.${MINOR}.${PATCH}-${BRANCH}"
              echo "No tag found; using incremented $TAG for manual trigger"
            fi
          fi
          if [[ ! "$TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z.-]+)?$ ]]; then
            echo "Tag $TAG is not semantic version (expected vX.Y.Z or with prerelease)" && exit 1
          fi
          VERSION="${TAG#v}"
          echo "VERSION_TAG=$TAG" >> "$GITHUB_ENV"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "Resolved VERSION=$VERSION from tag $TAG"

      - name: Set app version in Tauri config
        run: |
          node -e "const fs=require('fs');const p='src-tauri/tauri.conf.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));j.version=process.env.VERSION;fs.writeFileSync(p,JSON.stringify(j,null,2)+'\n');console.log('Set tauri.conf.json version to',process.env.VERSION);"

      - name: Install frontend deps
        run: npm ci
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Debug dist contents
        run: |
          ls -al frontend/dist || echo 'dist missing'
          find frontend/dist -type f | head -50
          test -f frontend/dist/index.html || { echo 'index.html missing; build failed'; exit 1; }

      - name: Install Tauri CLI (dry run)
        if: ${{ inputs.dry_run }}
        run: |
          cargo tauri --version || cargo install tauri-cli --locked

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf \
            webkit2gtk-4.1-dev || sudo apt-get install -y webkit2gtk-4.0-dev

      - name: Tauri build (dry run, no release upload)
        if: ${{ inputs.dry_run }}
        run: cargo tauri build
        working-directory: src-tauri

      - name: Build and publish with Tauri
        if: ${{ !inputs.dry_run }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Tauri code signing (Windows/Linux)
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # Optional: Apple codesigning (macOS)
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: ${{ env.VERSION_TAG }}
          releaseName: Real Life Context Switching v${{ env.VERSION }}
          releaseBody: |
            Automated build for ${{ env.VERSION_TAG }}.
            - OS: ${{ matrix.platform }}
          releaseDraft: false
          prerelease: false
